import * as pdfMake from 'pdfmake/build/pdfmake';
import * as pdfFonts from 'pdfmake/build/vfs_fonts';
import {
  fcfe_fcff_headingObj,
  relative_valuation_headingObj,
  footerInfo,
} from './exportResults.data';
import * as moment from 'moment';

pdfMake.vfs = pdfFonts.pdfMake.vfs;
export function generatePdf(valuation: any, res: any) {
  const docDefinition = {
    tableLayout: 'auto',
    pageOrientation: 'landscape',
    footer: function (currentPage, pageCount) {
      return [
        {
          text: `Company Logo`,
          style: 'footer',
        },
        {
          text: `${valuation.company}`,
          style: 'footer',
        },
        { text: `Address: ${footerInfo.address}`, style: 'footer' },
        { text: `Email - ${footerInfo.email}`, style: 'footer' },
        {
          text: `Page ${currentPage} of ${pageCount}`,
          alignment: 'center',
          style: 'footer',
        },
      ];
    },
    content: [
      {
        text: `${valuation.company}`,
        style: 'header',
      },
      {
        text: `Valuation Date: ${moment(
          valuation.inputData.valuationDate,
        ).format('MMM D, YYYY')}`,
        style: 'header',
      },
      {
        text: `Generated By- ${valuation.user.username}`,
        style: 'header',
      },
      {
        text: `Generated On- ${moment(valuation.createdAt).format(
          'MMM D, YYYY',
        )}`,
        style: 'header',
      },
      {
        text: 'Valuation of a firm based on Profit loss and balance sheet statements.',
        style: 'subHeader',
      },
      getPdfContent(valuation),
    ],
    styles: {
      header: {
        fontSize: 12,
        bold: true,
      },
      subHeader: {
        fontSize: 12,
        margin: [0, 15, 0, 10],
      },
      footer: {
        fontSize: 8,
        margin: [30, 0, 0, 0],
      },
    },
  };

  const pdfDoc = pdfMake.createPdf(docDefinition);
  // pdfDoc.getBuffer((buffer) => {
  //   res.setHeader('Content-Type', 'application/pdf');
  //   res.setHeader(
  //     'Content-Disposition',
  //     `attachment; filename=ValuationResult-${new Date().getTime()}.pdf`,
  //   );
  //   res.setHeader('Content-Length', buffer.length);
  //   res.end(buffer);
  // });
  pdfDoc.getBuffer((buffer) => {
    res.type('application/pdf');
    res.end(buffer);
  });
}

export function getPdfContent(valuation:any) {
  const { model, valuationData } = valuation;
  if (model === 'FCFE' || model === 'FCFE')
    return {
      table: {
        headerRows: 1,
        body: FCFEAndFCFF_Format(valuationData) || [],
        style: 'table',
      },
    };
  else if (model === 'Relative_Valuation') {
    const headerData = [
      'Sr.No',
      'Name',
      'P/E Ratio as on Valuation Date',
      'P/B Ratio as on Valuation Date',
      'EV/EBITDA as on Valuation Date',
      'Price/Sales Valuation Date',
    ];
    //Get Companies data here ..........
    const rows = [];
    valuation.companies.map((obj: any, index: number) => {
      rows.push([
        index + 1,
        obj.company,
        obj.peRatio,
        obj.pbRatio,
        obj.ebitda,
        obj.sales,
      ]);
    });
    // const emptyRow=[{},{},{},{},{},{}];
    const average = ['', 'Average', 7.03, 0.67, 4.63, 0.63];
    const median = ['', 'Median', 5.03, 0.45, 6.22, 0.43];
    const result2 = [];
    valuationData.map((obj:any, index:number) => {
      if (obj.particular === 'pbRatio') {
        result2.push([
          index + 1,
          relative_valuation_headingObj['pbRatioLabel'],
          '',
          '',
        ]);
        result2.push([
          '',
          relative_valuation_headingObj['netWorth'],
          obj.netWorthAvg,
          obj.netWorthMed,
        ]);
        result2.push([
          '',
          relative_valuation_headingObj['pbShares'],
          obj.pbSharesAvg,
          obj.pbSharesMed,
        ]);
        result2.push([
          '',
          relative_valuation_headingObj['bookValue'],
          obj.bookValueAvg,
          obj.bookValueMed,
        ]);
        result2.push([
          '',
          relative_valuation_headingObj['pbRatio'],
          obj.pbRatioAvg,
          obj.pbRatioMed,
        ]);
        result2.push([
          '',
          relative_valuation_headingObj['pbMarketPrice'],
          obj.pbMarketPriceAvg,
          obj.pbMarketPriceMed,
        ]);
      }else if (obj.particular === 'peRatio') {
        result2.push([
          index + 1,
          relative_valuation_headingObj['peRatioLabel'],
          '',
          '',
        ]);
        result2.push([
          '',
          relative_valuation_headingObj['eps'],
          obj.epsAvg,
          obj.epsMed,
        ]);
        result2.push([
          '',
          relative_valuation_headingObj['peRatio'],
          obj.peRatioAvg,
          obj.peRatioMed,
        ]);
        result2.push([
          '',
          relative_valuation_headingObj['peMarketPrice'],
          obj.peMarketPriceAvg,
          obj.peMarketPriceMed,
        ]);
      }
    });
    return [
      {
        table: {
          headerRows: 1,
          body: [headerData, ...rows, average, median] || [],
          style: 'table',
        },
      },
      {
        text: '\n\n',
      },
      {
        table: {
          headerRows: 1,
          body:
            [
              [
                {
                  text: 'Valuation of CMM InfraProjects Ltd                                Amount (in INR)',
                  colSpan: 4,
                },
                {},
                {},
                {},
              ],
              ['Sr.No', 'Particulars', 'As on 31.03.2018', 'As on 31.03.2018'],
              ...result2,
            ] || [],
          style: 'table',
        },
      },
    ];
  }
}

function FCFEAndFCFF_Format(valuationData: any[]) {
  const particulars = [],
    pat = [],
    depAndAmortisation = [],
    onCashItems = [],
    nca = [],
    defferedTaxAssets = [],
    netCashFlow = [],
    fixedAssets = [],
    fcff = [],
    discountingPeriod = [],
    discountingFactor = [],
    presentFCFF = [],
    sumOfCashFlows = [],
    debtOnDate = [],
    cashEquivalents = [],
    surplusAssets = [],
    otherAdj = [],
    equityValue = [],
    noOfShares = [],
    valuePerShare = [];

  //Set Headers
  particulars.push(fcfe_fcff_headingObj['particulars']);
  pat.push(fcfe_fcff_headingObj['pat']);
  depAndAmortisation.push(fcfe_fcff_headingObj['depAndAmortisation']);
  onCashItems.push(fcfe_fcff_headingObj['onCashItems']);
  nca.push(fcfe_fcff_headingObj['nca']);
  defferedTaxAssets.push(fcfe_fcff_headingObj['defferedTaxAssets']);
  netCashFlow.push(fcfe_fcff_headingObj['netCashFlow']);
  fixedAssets.push(fcfe_fcff_headingObj['fixedAssets']);
  fcff.push(fcfe_fcff_headingObj['fcff']);
  discountingPeriod.push(fcfe_fcff_headingObj['discountingPeriod']);
  discountingFactor.push(fcfe_fcff_headingObj['discountingFactor']);
  presentFCFF.push(fcfe_fcff_headingObj['presentFCFF']);
  sumOfCashFlows.push(fcfe_fcff_headingObj['sumOfCashFlows']);
  debtOnDate.push(fcfe_fcff_headingObj['debtOnDate']);
  cashEquivalents.push(fcfe_fcff_headingObj['cashEquivalents']);
  surplusAssets.push(fcfe_fcff_headingObj['surplusAssets']);
  otherAdj.push(fcfe_fcff_headingObj['otherAdj']);
  equityValue.push(fcfe_fcff_headingObj['equityValue']);
  noOfShares.push(fcfe_fcff_headingObj['noOfShares']);
  valuePerShare.push(fcfe_fcff_headingObj['valuePerShare']);

  //Organized Data Process
  valuationData.map((valuation) => {
    Object.entries(valuation).forEach(([key, value]) => {
      if (value === null) value = '';
      if (key === 'particulars') particulars.push(value);
      else if (key === 'pat') pat.push(value);
      else if (key === 'depAndAmortisation') depAndAmortisation.push(value);
      else if (key === 'onCashItems') onCashItems.push(value);
      else if (key === 'nca') nca.push(value);
      else if (key === 'defferedTaxAssets') defferedTaxAssets.push(value);
      else if (key === 'netCashFlow') netCashFlow.push(value);
      else if (key === 'fixedAssets') fixedAssets.push(value);
      else if (key === 'fcff') fcff.push(value);
      else if (key === 'discountingPeriod') discountingPeriod.push(value);
      else if (key === 'discountingFactor') discountingFactor.push(value);
      else if (key === 'presentFCFF') presentFCFF.push(value);
      else if (key === 'sumOfCashFlows') sumOfCashFlows.push(value);
      else if (key === 'debtOnDate') debtOnDate.push(value);
      else if (key === 'cashEquivalents') cashEquivalents.push(value);
      else if (key === 'surplusAssets') surplusAssets.push(value);
      else if (key === 'otherAdj') otherAdj.push(value);
      else if (key === 'equityValue') equityValue.push(value);
      else if (key === 'noOfShares') noOfShares.push(value);
      else if (key === 'valuePerShare') valuePerShare.push(value);
    });
  });
  return [
    particulars,
    pat,
    depAndAmortisation,
    onCashItems,
    nca,
    defferedTaxAssets,
    netCashFlow,
    fixedAssets,
    fcff,
    discountingPeriod,
    discountingFactor,
    presentFCFF,
    sumOfCashFlows,
    debtOnDate,
    cashEquivalents,
    surplusAssets,
    otherAdj,
    equityValue,
    noOfShares,
    valuePerShare,
  ];
}
